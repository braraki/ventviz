
// Code generated by stanc 3032660f
#include <stan/model/model_header.hpp>
namespace ventilator_model_namespace {


inline void validate_positive_index(const char* var_name, const char* expr,
                                    int val) {
  if (val < 1) {
    std::stringstream msg;
    msg << "Found dimension size less than one in simplex declaration"
        << "; variable=" << var_name << "; dimension size expression=" << expr
        << "; expression value=" << val;
    std::string msg_str(msg.str());
    throw std::invalid_argument(msg_str.c_str());
  }
}

inline void validate_unit_vector_index(const char* var_name, const char* expr,
                                       int val) {
  if (val <= 1) {
    std::stringstream msg;
    if (val == 1) {
      msg << "Found dimension size one in unit vector declaration."
          << " One-dimensional unit vector is discrete"
          << " but the target distribution must be continuous."
          << " variable=" << var_name << "; dimension size expression=" << expr;
    } else {
      msg << "Found dimension size less than one in unit vector declaration"
          << "; variable=" << var_name << "; dimension size expression=" << expr
          << "; expression value=" << val;
    }
    std::string msg_str(msg.str());
    throw std::invalid_argument(msg_str.c_str());
  }
}


using std::istream;
using std::string;
using std::stringstream;
using std::vector;
using std::pow;
using stan::io::dump;
using stan::math::lgamma;
using stan::model::model_base_crtp;
using stan::model::rvalue;
using stan::model::cons_list;
using stan::model::index_uni;
using stan::model::index_max;
using stan::model::index_min;
using stan::model::index_min_max;
using stan::model::index_multi;
using stan::model::index_omni;
using stan::model::nil_index_list;
using namespace stan::math; 

static int current_statement__ = 0;
static const std::vector<string> locations_array__ = {" (found before start of program)",
                                                      " (in 'C:/Users/brara/projects/ventilator/models/ventilator.stan', line 96, column 2 to column 34)",
                                                      " (in 'C:/Users/brara/projects/ventilator/models/ventilator.stan', line 97, column 2 to column 30)",
                                                      " (in 'C:/Users/brara/projects/ventilator/models/ventilator.stan', line 98, column 2 to column 32)",
                                                      " (in 'C:/Users/brara/projects/ventilator/models/ventilator.stan', line 100, column 2 to line 102, column 66)",
                                                      " (in 'C:/Users/brara/projects/ventilator/models/ventilator.stan', line 105, column 4 to column 36)",
                                                      " (in 'C:/Users/brara/projects/ventilator/models/ventilator.stan', line 106, column 4 to column 34)",
                                                      " (in 'C:/Users/brara/projects/ventilator/models/ventilator.stan', line 107, column 4 to column 35)",
                                                      " (in 'C:/Users/brara/projects/ventilator/models/ventilator.stan', line 104, column 19 to line 108, column 3)",
                                                      " (in 'C:/Users/brara/projects/ventilator/models/ventilator.stan', line 104, column 2 to line 108, column 3)",
                                                      " (in 'C:/Users/brara/projects/ventilator/models/ventilator.stan', line 72, column 2 to column 19)",
                                                      " (in 'C:/Users/brara/projects/ventilator/models/ventilator.stan', line 73, column 10 to column 13)",
                                                      " (in 'C:/Users/brara/projects/ventilator/models/ventilator.stan', line 73, column 2 to column 15)",
                                                      " (in 'C:/Users/brara/projects/ventilator/models/ventilator.stan', line 77, column 2 to column 15)",
                                                      " (in 'C:/Users/brara/projects/ventilator/models/ventilator.stan', line 78, column 2 to column 14)",
                                                      " (in 'C:/Users/brara/projects/ventilator/models/ventilator.stan', line 79, column 2 to column 18)",
                                                      " (in 'C:/Users/brara/projects/ventilator/models/ventilator.stan', line 80, column 2 to column 16)",
                                                      " (in 'C:/Users/brara/projects/ventilator/models/ventilator.stan', line 82, column 2 to column 13)",
                                                      " (in 'C:/Users/brara/projects/ventilator/models/ventilator.stan', line 83, column 2 to column 21)",
                                                      " (in 'C:/Users/brara/projects/ventilator/models/ventilator.stan', line 84, column 2 to column 24)",
                                                      " (in 'C:/Users/brara/projects/ventilator/models/ventilator.stan', line 85, column 2 to column 23)",
                                                      " (in 'C:/Users/brara/projects/ventilator/models/ventilator.stan', line 86, column 2 to column 17)",
                                                      " (in 'C:/Users/brara/projects/ventilator/models/ventilator.stan', line 87, column 2 to column 27)",
                                                      " (in 'C:/Users/brara/projects/ventilator/models/ventilator.stan', line 88, column 2 to column 48)",
                                                      " (in 'C:/Users/brara/projects/ventilator/models/ventilator.stan', line 89, column 2 to column 29)",
                                                      " (in 'C:/Users/brara/projects/ventilator/models/ventilator.stan', line 90, column 2 to column 52)",
                                                      " (in 'C:/Users/brara/projects/ventilator/models/ventilator.stan', line 91, column 2 to column 35)",
                                                      " (in 'C:/Users/brara/projects/ventilator/models/ventilator.stan', line 92, column 2 to column 16)",
                                                      " (in 'C:/Users/brara/projects/ventilator/models/ventilator.stan', line 100, column 14 to column 17)",
                                                      " (in 'C:/Users/brara/projects/ventilator/models/ventilator.stan', line 8, column 4 to column 18)",
                                                      " (in 'C:/Users/brara/projects/ventilator/models/ventilator.stan', line 12, column 6 to column 18)",
                                                      " (in 'C:/Users/brara/projects/ventilator/models/ventilator.stan', line 11, column 9 to line 12, column 18)",
                                                      " (in 'C:/Users/brara/projects/ventilator/models/ventilator.stan', line 10, column 6 to column 17)",
                                                      " (in 'C:/Users/brara/projects/ventilator/models/ventilator.stan', line 9, column 4 to line 12, column 18)",
                                                      " (in 'C:/Users/brara/projects/ventilator/models/ventilator.stan', line 14, column 4 to column 48)",
                                                      " (in 'C:/Users/brara/projects/ventilator/models/ventilator.stan', line 15, column 4 to column 17)",
                                                      " (in 'C:/Users/brara/projects/ventilator/models/ventilator.stan', line 7, column 42 to line 16, column 3)",
                                                      " (in 'C:/Users/brara/projects/ventilator/models/ventilator.stan', line 30, column 4 to column 19)",
                                                      " (in 'C:/Users/brara/projects/ventilator/models/ventilator.stan', line 32, column 4 to column 17)",
                                                      " (in 'C:/Users/brara/projects/ventilator/models/ventilator.stan', line 33, column 4 to column 19)",
                                                      " (in 'C:/Users/brara/projects/ventilator/models/ventilator.stan', line 34, column 4 to column 15)",
                                                      " (in 'C:/Users/brara/projects/ventilator/models/ventilator.stan', line 36, column 4 to column 29)",
                                                      " (in 'C:/Users/brara/projects/ventilator/models/ventilator.stan', line 37, column 4 to column 25)",
                                                      " (in 'C:/Users/brara/projects/ventilator/models/ventilator.stan', line 38, column 4 to column 21)",
                                                      " (in 'C:/Users/brara/projects/ventilator/models/ventilator.stan', line 40, column 4 to column 46)",
                                                      " (in 'C:/Users/brara/projects/ventilator/models/ventilator.stan', line 42, column 4 to column 47)",
                                                      " (in 'C:/Users/brara/projects/ventilator/models/ventilator.stan', line 60, column 6 to column 21)",
                                                      " (in 'C:/Users/brara/projects/ventilator/models/ventilator.stan', line 61, column 6 to column 52)",
                                                      " (in 'C:/Users/brara/projects/ventilator/models/ventilator.stan', line 62, column 6 to column 36)",
                                                      " (in 'C:/Users/brara/projects/ventilator/models/ventilator.stan', line 59, column 9 to line 63, column 5)",
                                                      " (in 'C:/Users/brara/projects/ventilator/models/ventilator.stan', line 55, column 6 to column 21)",
                                                      " (in 'C:/Users/brara/projects/ventilator/models/ventilator.stan', line 56, column 6 to column 51)",
                                                      " (in 'C:/Users/brara/projects/ventilator/models/ventilator.stan', line 57, column 6 to column 42)",
                                                      " (in 'C:/Users/brara/projects/ventilator/models/ventilator.stan', line 54, column 51 to line 58, column 5)",
                                                      " (in 'C:/Users/brara/projects/ventilator/models/ventilator.stan', line 54, column 9 to line 63, column 5)",
                                                      " (in 'C:/Users/brara/projects/ventilator/models/ventilator.stan', line 50, column 6 to column 18)",
                                                      " (in 'C:/Users/brara/projects/ventilator/models/ventilator.stan', line 51, column 6 to column 16)",
                                                      " (in 'C:/Users/brara/projects/ventilator/models/ventilator.stan', line 52, column 6 to column 69)",
                                                      " (in 'C:/Users/brara/projects/ventilator/models/ventilator.stan', line 49, column 46 to line 53, column 5)",
                                                      " (in 'C:/Users/brara/projects/ventilator/models/ventilator.stan', line 49, column 9 to line 63, column 5)",
                                                      " (in 'C:/Users/brara/projects/ventilator/models/ventilator.stan', line 45, column 6 to column 21)",
                                                      " (in 'C:/Users/brara/projects/ventilator/models/ventilator.stan', line 46, column 6 to column 74)",
                                                      " (in 'C:/Users/brara/projects/ventilator/models/ventilator.stan', line 47, column 6 to column 39)",
                                                      " (in 'C:/Users/brara/projects/ventilator/models/ventilator.stan', line 44, column 27 to line 48, column 5)",
                                                      " (in 'C:/Users/brara/projects/ventilator/models/ventilator.stan', line 44, column 4 to line 63, column 5)",
                                                      " (in 'C:/Users/brara/projects/ventilator/models/ventilator.stan', line 65, column 4 to column 40)",
                                                      " (in 'C:/Users/brara/projects/ventilator/models/ventilator.stan', line 67, column 4 to column 16)",
                                                      " (in 'C:/Users/brara/projects/ventilator/models/ventilator.stan', line 29, column 30 to line 68, column 3)"};


template <typename T0__, typename T1__, typename T2__, typename T3__>
stan::promote_args_t<T0__, T1__, T2__,
T3__>
flow_function(const T0__& t, const T1__& insp_time, const T2__& const_flow,
              const T3__& flow_rise_time, std::ostream* pstream__) {
  using local_scalar_t__ = stan::promote_args_t<T0__, T1__, T2__, T3__>;
  const static bool propto__ = true;
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  (void) DUMMY_VAR__;  // suppress unused var warning
  
  try {
    local_scalar_t__ sign;
    sign = DUMMY_VAR__;
    
    current_statement__ = 29;
    sign = 0;
    current_statement__ = 33;
    if (logical_lte(t, flow_rise_time)) {
      current_statement__ = 32;
      sign = 1.0;
    } else {
      current_statement__ = 31;
      if (logical_gte(t, (insp_time - flow_rise_time))) {
        current_statement__ = 30;
        sign = -1.0;
      } 
    }
    local_scalar_t__ dFlow;
    dFlow = DUMMY_VAR__;
    
    current_statement__ = 34;
    dFlow = ((sign * const_flow) / flow_rise_time);
    current_statement__ = 35;
    return dFlow;
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
  }
  
}

struct flow_function_functor__ {
template <typename T0__, typename T1__, typename T2__, typename T3__>
stan::promote_args_t<T0__, T1__, T2__,
T3__>
operator()(const T0__& t, const T1__& insp_time, const T2__& const_flow,
           const T3__& flow_rise_time, std::ostream* pstream__)  const 
{
return flow_function(t, insp_time, const_flow, flow_rise_time, pstream__);
}
};

template <typename T0__, typename T1__, typename T2__, typename T3__,
typename T4__, typename T5__, typename T6__, typename T7__, typename T8__,
typename T9__, typename T10__, typename T11__>
Eigen::Matrix<stan::promote_args_t<T0__, T1__, T2__, T3__, T4__, stan::promote_args_t<T5__,
T6__, T7__, T8__, T9__, stan::promote_args_t<T10__,
T11__>>>, -1, 1>
ventilator(const T0__& t, const Eigen::Matrix<T1__, -1, 1>& y, const T2__& R,
           const T3__& C_dyn, const T4__& C_static, const T5__& insp_time,
           const T6__& const_flow, const T7__& flow_rise_time,
           const T8__& breath_time, const T9__& hold_time, const T10__& peep,
           const T11__& frc, std::ostream* pstream__) {
  using local_scalar_t__ = stan::promote_args_t<T0__,
          T1__,
          T2__,
          T3__,
          T4__, stan::promote_args_t<T5__,
          T6__,
          T7__,
          T8__,
          T9__, stan::promote_args_t<T10__,
          T11__>>>;
  const static bool propto__ = true;
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  (void) DUMMY_VAR__;  // suppress unused var warning
  
  try {
    Eigen::Matrix<local_scalar_t__, -1, 1> dydt;
    dydt = Eigen::Matrix<local_scalar_t__, -1, 1>(3);
    stan::math::fill(dydt, DUMMY_VAR__);
    
    local_scalar_t__ dVolume;
    dVolume = DUMMY_VAR__;
    
    local_scalar_t__ dPressure;
    dPressure = DUMMY_VAR__;
    
    local_scalar_t__ dFlow;
    dFlow = DUMMY_VAR__;
    
    local_scalar_t__ volume;
    volume = DUMMY_VAR__;
    
    current_statement__ = 41;
    volume = (y[(1 - 1)] - frc);
    local_scalar_t__ pressure;
    pressure = DUMMY_VAR__;
    
    current_statement__ = 42;
    pressure = y[(2 - 1)];
    local_scalar_t__ flow;
    flow = DUMMY_VAR__;
    
    current_statement__ = 43;
    flow = y[(3 - 1)];
    local_scalar_t__ num_breaths;
    num_breaths = DUMMY_VAR__;
    
    current_statement__ = 44;
    num_breaths = stan::math::floor((t / breath_time));
    local_scalar_t__ mod_t;
    mod_t = DUMMY_VAR__;
    
    current_statement__ = 45;
    mod_t = (t - (num_breaths * breath_time));
    current_statement__ = 64;
    if (logical_lt(mod_t, insp_time)) {
      current_statement__ = 60;
      dVolume = flow;
      current_statement__ = 61;
      dFlow = flow_function(mod_t, insp_time, const_flow,
                flow_rise_time, pstream__);
      current_statement__ = 62;
      dPressure = ((flow / C_dyn) + (R * dFlow));
    } else {
      current_statement__ = 59;
      if (logical_lt(mod_t, (insp_time + hold_time))) {
        current_statement__ = 55;
        dVolume = 0;
        current_statement__ = 56;
        dFlow = 0;
        current_statement__ = 57;
        dPressure = (((-pressure + (volume / C_static)) + peep) /
                      (R * C_static));
      } else {
        current_statement__ = 54;
        if (logical_lt(mod_t, ((insp_time + hold_time) + 0.02))) {
          current_statement__ = 50;
          dVolume = flow;
          current_statement__ = 51;
          dPressure = ((-pressure + peep) / (R * C_static));
          current_statement__ = 52;
          dFlow = ((-volume / (R * C_static)) / 0.02);
        } else {
          current_statement__ = 46;
          dVolume = flow;
          current_statement__ = 47;
          dPressure = ((-pressure + peep) / (R * C_static));
          current_statement__ = 48;
          dFlow = (-flow / (R * C_static));
        }
      }
    }
    current_statement__ = 65;
    assign(dydt, nil_index_list(),
      transpose(stan::math::to_row_vector(
        stan::math::array_builder<local_scalar_t__>().add(dVolume)
        .add(dPressure).add(dFlow).array())), "assigning variable dydt");
    current_statement__ = 66;
    return dydt;
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
  }
  
}

struct ventilator_functor__ {
template <typename T0__, typename T1__, typename T2__, typename T3__,
typename T4__, typename T5__, typename T6__, typename T7__, typename T8__,
typename T9__, typename T10__, typename T11__>
Eigen::Matrix<stan::promote_args_t<T0__, T1__, T2__, T3__, T4__, stan::promote_args_t<T5__,
T6__, T7__, T8__, T9__, stan::promote_args_t<T10__,
T11__>>>, -1, 1>
operator()(const T0__& t, const Eigen::Matrix<T1__, -1, 1>& y, const T2__& R,
           const T3__& C_dyn, const T4__& C_static, const T5__& insp_time,
           const T6__& const_flow, const T7__& flow_rise_time,
           const T8__& breath_time, const T9__& hold_time, const T10__& peep,
           const T11__& frc, std::ostream* pstream__)  const 
{
return ventilator(t, y, R, C_dyn, C_static, insp_time, const_flow,
         flow_rise_time, breath_time, hold_time, peep, frc, pstream__);
}
};


struct ventilator_odefunctor__ {
template <typename T0__, typename T1__, typename T2__, typename T3__,
typename T4__, typename T5__, typename T6__, typename T7__, typename T8__,
typename T9__, typename T10__, typename T11__>
Eigen::Matrix<stan::promote_args_t<T0__, T1__, T2__, T3__, T4__, stan::promote_args_t<T5__,
T6__, T7__, T8__, T9__, stan::promote_args_t<T10__,
T11__>>>, -1, 1>
operator()(const T0__& t, const Eigen::Matrix<T1__, -1, 1>& y,
           std::ostream* pstream__, const T2__& R, const T3__& C_dyn,
           const T4__& C_static, const T5__& insp_time,
           const T6__& const_flow, const T7__& flow_rise_time,
           const T8__& breath_time, const T9__& hold_time, const T10__& peep,
           const T11__& frc)  const 
{
return ventilator(t, y, R, C_dyn, C_static, insp_time, const_flow,
         flow_rise_time, breath_time, hold_time, peep, frc, pstream__);
}
};

class ventilator_model final : public model_base_crtp<ventilator_model> {

 private:
  int N_t;
  std::vector<double> ts;
  double RR;
  double IE;
  double VT;
  double peep;
  double R;
  double C_dyn;
  double C_static;
  double hold_time;
  double frc;
  double breath_time;
  double insp_time;
  double flow_rise_time;
  double const_flow;
  Eigen::Matrix<double, -1, 1> y0;
  double t0;
 
 public:
  ~ventilator_model() final { }
  
  std::string model_name() const final { return "ventilator_model"; }

  std::vector<std::string> model_compile_info() const {
    std::vector<std::string> stanc_info;
    stanc_info.push_back("stanc_version = stanc3 3032660f");
    stanc_info.push_back("stancflags = ");
    return stanc_info;
  }
  
  
  ventilator_model(stan::io::var_context& context__,
                   unsigned int random_seed__ = 0,
                   std::ostream* pstream__ = nullptr) : model_base_crtp(0) {
    using local_scalar_t__ = double ;
    boost::ecuyer1988 base_rng__ = 
        stan::services::util::create_rng(random_seed__, 0);
    (void) base_rng__;  // suppress unused var warning
    static const char* function__ = "ventilator_model_namespace::ventilator_model";
    (void) function__;  // suppress unused var warning
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    (void) DUMMY_VAR__;  // suppress unused var warning
    
    try {
      int pos__;
      pos__ = std::numeric_limits<int>::min();
      
      pos__ = 1;
      current_statement__ = 10;
      context__.validate_dims("data initialization","N_t","int",
          context__.to_vec());
      N_t = std::numeric_limits<int>::min();
      
      current_statement__ = 10;
      N_t = context__.vals_i("N_t")[(1 - 1)];
      current_statement__ = 10;
      current_statement__ = 10;
      check_greater_or_equal(function__, "N_t", N_t, 0);
      current_statement__ = 11;
      validate_non_negative_index("ts", "N_t", N_t);
      current_statement__ = 12;
      context__.validate_dims("data initialization","ts","double",
          context__.to_vec(N_t));
      ts = std::vector<double>(N_t, std::numeric_limits<double>::quiet_NaN());
      
      current_statement__ = 12;
      assign(ts, nil_index_list(), context__.vals_r("ts"),
        "assigning variable ts");
      current_statement__ = 13;
      RR = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 13;
      RR = 20;
      current_statement__ = 14;
      IE = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 14;
      IE = 3;
      current_statement__ = 15;
      VT = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 15;
      VT = 0.500;
      current_statement__ = 16;
      peep = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 16;
      peep = 5;
      current_statement__ = 17;
      R = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 17;
      R = 5;
      current_statement__ = 18;
      C_dyn = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 18;
      C_dyn = 0.049;
      current_statement__ = 19;
      C_static = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 19;
      C_static = 0.050;
      current_statement__ = 20;
      hold_time = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 20;
      hold_time = 0.4;
      current_statement__ = 21;
      frc = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 21;
      frc = 2.0;
      current_statement__ = 22;
      breath_time = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 22;
      breath_time = (60 / RR);
      current_statement__ = 23;
      insp_time = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 23;
      insp_time = ((1.0 / (1.0 + IE)) * breath_time);
      current_statement__ = 24;
      flow_rise_time = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 24;
      flow_rise_time = 0.05;
      current_statement__ = 25;
      const_flow = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 25;
      const_flow = (VT / (insp_time - flow_rise_time));
      current_statement__ = 26;
      y0 = Eigen::Matrix<double, -1, 1>(3);
      stan::math::fill(y0, std::numeric_limits<double>::quiet_NaN());
      
      current_statement__ = 26;
      assign(y0, nil_index_list(),
        transpose(stan::math::to_row_vector(
          stan::math::array_builder<double>().add(frc).add(peep).add(0.0)
          .array())), "assigning variable y0");
      current_statement__ = 27;
      t0 = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 27;
      t0 = 0.0;
      current_statement__ = 28;
      validate_non_negative_index("y", "N_t", N_t);
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
    }
    num_params_r__ = 0U;
    
    try {
      
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
    }
  }
  template <bool propto__, bool jacobian__, typename T__>
  inline T__ log_prob(std::vector<T__>& params_r__,
                      std::vector<int>& params_i__,
                      std::ostream* pstream__ = nullptr) const {
    using local_scalar_t__ = T__;
    T__ lp__(0.0);
    stan::math::accumulator<T__> lp_accum__;
    static const char* function__ = "ventilator_model_namespace::log_prob";
(void) function__;  // suppress unused var warning

    stan::io::reader<local_scalar_t__> in__(params_r__, params_i__);
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    (void) DUMMY_VAR__;  // suppress unused var warning

    
    try {
      
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
    }
    lp_accum__.add(lp__);
    return lp_accum__.sum();
    } // log_prob() 
    
  template <typename RNG>
  inline void write_array(RNG& base_rng__, std::vector<double>& params_r__,
                          std::vector<int>& params_i__,
                          std::vector<double>& vars__,
                          bool emit_transformed_parameters__ = true,
                          bool emit_generated_quantities__ = true,
                          std::ostream* pstream__ = nullptr) const {
    using local_scalar_t__ = double;
    vars__.resize(0);
    stan::io::reader<local_scalar_t__> in__(params_r__, params_i__);
    static const char* function__ = "ventilator_model_namespace::write_array";
(void) function__;  // suppress unused var warning

    (void) function__;  // suppress unused var warning

    double lp__ = 0.0;
    (void) lp__;  // dummy to suppress unused var warning
    stan::math::accumulator<double> lp_accum__;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    (void) DUMMY_VAR__;  // suppress unused var warning

    
    try {
      if (logical_negation((primitive_value(emit_transformed_parameters__) ||
            primitive_value(emit_generated_quantities__)))) {
        return ;
      } 
      if (logical_negation(emit_generated_quantities__)) {
        return ;
      } 
      double breath_timeq;
      breath_timeq = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 1;
      breath_timeq = breath_time;
      double insp_timeq;
      insp_timeq = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 2;
      insp_timeq = insp_time;
      double const_flowq;
      const_flowq = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 3;
      const_flowq = const_flow;
      std::vector<Eigen::Matrix<double, -1, 1>> y;
      y = std::vector<Eigen::Matrix<double, -1, 1>>(N_t, Eigen::Matrix<double, -1, 1>(3));
      stan::math::fill(y, std::numeric_limits<double>::quiet_NaN());
      
      current_statement__ = 4;
      assign(y, nil_index_list(),
        ode_rk45(ventilator_odefunctor__(), y0, t0, ts, pstream__, R, C_dyn,
          C_static, insp_time, const_flow, flow_rise_time, breath_time,
          hold_time, peep, frc), "assigning variable y");
      current_statement__ = 9;
      for (int t = 1; t <= N_t; ++t) {
        current_statement__ = 5;
        assign(y,
          cons_list(index_uni(t), cons_list(index_uni(1), nil_index_list())),
          (y[(t - 1)][(1 - 1)] + normal_rng(0, 0.005, base_rng__)),
          "assigning variable y");
        current_statement__ = 6;
        assign(y,
          cons_list(index_uni(t), cons_list(index_uni(2), nil_index_list())),
          (y[(t - 1)][(2 - 1)] + normal_rng(0, 0.2, base_rng__)),
          "assigning variable y");
        current_statement__ = 7;
        assign(y,
          cons_list(index_uni(t), cons_list(index_uni(3), nil_index_list())),
          (y[(t - 1)][(3 - 1)] + normal_rng(0, 0.05, base_rng__)),
          "assigning variable y");}
      vars__.emplace_back(breath_timeq);
      vars__.emplace_back(insp_timeq);
      vars__.emplace_back(const_flowq);
      for (int sym1__ = 1; sym1__ <= 3; ++sym1__) {
        for (int sym2__ = 1; sym2__ <= N_t; ++sym2__) {
          vars__.emplace_back(y[(sym2__ - 1)][(sym1__ - 1)]);}}
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
    }
    } // write_array() 
    
  inline void transform_inits(const stan::io::var_context& context__,
                              std::vector<int>& params_i__,
                              std::vector<double>& vars__,
                              std::ostream* pstream__) const
    final {
    using local_scalar_t__ = double;
    vars__.clear();
    vars__.reserve(num_params_r__);
    
    try {
      int pos__;
      pos__ = std::numeric_limits<int>::min();
      
      pos__ = 1;
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
    }
    } // transform_inits() 
    
  inline void get_param_names(std::vector<std::string>& names__) const {
    
    names__.clear();
    names__.emplace_back("breath_timeq");
    names__.emplace_back("insp_timeq");
    names__.emplace_back("const_flowq");
    names__.emplace_back("y");
    } // get_param_names() 
    
  inline void get_dims(std::vector<std::vector<size_t>>& dimss__) const
    final {
    dimss__.clear();
    dimss__.emplace_back(std::vector<size_t>{});
    
    dimss__.emplace_back(std::vector<size_t>{});
    
    dimss__.emplace_back(std::vector<size_t>{});
    
    dimss__.emplace_back(std::vector<size_t>{static_cast<size_t>(N_t),
                                             static_cast<size_t>(3)});
    
    } // get_dims() 
    
  inline void constrained_param_names(
                                      std::vector<std::string>& param_names__,
                                      bool emit_transformed_parameters__ = true,
                                      bool emit_generated_quantities__ = true) const
    final {
    
    
    if (emit_transformed_parameters__) {
      
    }
    
    if (emit_generated_quantities__) {
      param_names__.emplace_back(std::string() + "breath_timeq");
      param_names__.emplace_back(std::string() + "insp_timeq");
      param_names__.emplace_back(std::string() + "const_flowq");
      for (int sym1__ = 1; sym1__ <= 3; ++sym1__) {
        {
          for (int sym2__ = 1; sym2__ <= N_t; ++sym2__) {
            {
              param_names__.emplace_back(std::string() + "y" + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
            }}
        }}
    }
    
    } // constrained_param_names() 
    
  inline void unconstrained_param_names(
                                        std::vector<std::string>& param_names__,
                                        bool emit_transformed_parameters__ = true,
                                        bool emit_generated_quantities__ = true) const
    final {
    
    
    if (emit_transformed_parameters__) {
      
    }
    
    if (emit_generated_quantities__) {
      param_names__.emplace_back(std::string() + "breath_timeq");
      param_names__.emplace_back(std::string() + "insp_timeq");
      param_names__.emplace_back(std::string() + "const_flowq");
      for (int sym1__ = 1; sym1__ <= 3; ++sym1__) {
        {
          for (int sym2__ = 1; sym2__ <= N_t; ++sym2__) {
            {
              param_names__.emplace_back(std::string() + "y" + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
            }}
        }}
    }
    
    } // unconstrained_param_names() 
    
  inline std::string get_constrained_sizedtypes() const {
    stringstream s__;
    s__ << "[{\"name\":\"breath_timeq\",\"type\":{\"name\":\"real\"},\"block\":\"generated_quantities\"},{\"name\":\"insp_timeq\",\"type\":{\"name\":\"real\"},\"block\":\"generated_quantities\"},{\"name\":\"const_flowq\",\"type\":{\"name\":\"real\"},\"block\":\"generated_quantities\"},{\"name\":\"y\",\"type\":{\"name\":\"array\",\"length\":" << N_t << ",\"element_type\":{\"name\":\"vector\",\"length\":" << 3 << "}},\"block\":\"generated_quantities\"}]";
    return s__.str();
    } // get_constrained_sizedtypes() 
    
  inline std::string get_unconstrained_sizedtypes() const {
    stringstream s__;
    s__ << "[{\"name\":\"breath_timeq\",\"type\":{\"name\":\"real\"},\"block\":\"generated_quantities\"},{\"name\":\"insp_timeq\",\"type\":{\"name\":\"real\"},\"block\":\"generated_quantities\"},{\"name\":\"const_flowq\",\"type\":{\"name\":\"real\"},\"block\":\"generated_quantities\"},{\"name\":\"y\",\"type\":{\"name\":\"array\",\"length\":" << N_t << ",\"element_type\":{\"name\":\"vector\",\"length\":" << 3 << "}},\"block\":\"generated_quantities\"}]";
    return s__.str();
    } // get_unconstrained_sizedtypes() 
    
  
    // Begin method overload boilerplate
    template <typename RNG>
    inline void write_array(RNG& base_rng__,
                     Eigen::Matrix<double,Eigen::Dynamic,1>& params_r,
                     Eigen::Matrix<double,Eigen::Dynamic,1>& vars,
                     bool emit_transformed_parameters__ = true,
                     bool emit_generated_quantities__ = true,
                     std::ostream* pstream = nullptr) const {
      std::vector<double> params_r_vec(params_r.size());
      for (int i = 0; i < params_r.size(); ++i)
        params_r_vec[i] = params_r(i);
      std::vector<double> vars_vec;
      std::vector<int> params_i_vec;
      write_array(base_rng__, params_r_vec, params_i_vec, vars_vec,
          emit_transformed_parameters__, emit_generated_quantities__, pstream);
      vars.resize(vars_vec.size());
      for (int i = 0; i < vars.size(); ++i)
        vars(i) = vars_vec[i];
    }

    template <bool propto__, bool jacobian__, typename T_>
    inline T_ log_prob(Eigen::Matrix<T_,Eigen::Dynamic,1>& params_r,
               std::ostream* pstream = nullptr) const {
      std::vector<T_> vec_params_r;
      vec_params_r.reserve(params_r.size());
      for (int i = 0; i < params_r.size(); ++i)
        vec_params_r.push_back(params_r(i));
      std::vector<int> vec_params_i;
      return log_prob<propto__,jacobian__,T_>(vec_params_r, vec_params_i, pstream);
    }

    inline void transform_inits(const stan::io::var_context& context,
                         Eigen::Matrix<double, Eigen::Dynamic, 1>& params_r,
                         std::ostream* pstream__ = nullptr) const {
      std::vector<double> params_r_vec;
      std::vector<int> params_i_vec;
      transform_inits(context, params_i_vec, params_r_vec, pstream__);
      params_r.resize(params_r_vec.size());
      for (int i = 0; i < params_r.size(); ++i)
        params_r(i) = params_r_vec[i];
    }

};
}
using stan_model = ventilator_model_namespace::ventilator_model;

#ifndef USING_R

// Boilerplate
stan::model::model_base& new_model(
        stan::io::var_context& data_context,
        unsigned int seed,
        std::ostream* msg_stream) {
  stan_model* m = new stan_model(data_context, seed, msg_stream);
  return *m;
}

#endif


